Test that the zone family is honoured regardless of whether subnets are
specified or not.

-- Testcase --
{%
	include("./root/usr/share/firewall4/main.uc", {
		getenv: function(varname) {
			switch (varname) {
			case 'ACTION':
				return 'print';
			}
		}
	})
%}
-- End --

-- File uci/helpers.json --
{
	"helper" : [
		{
			"description" : "An example IPv4-only conntrack helper",
			"family" : "ipv4",
			"module" : "nf_conntrack_dummy",
			"name" : "test",
			"port" : 1234,
			"proto" : "tcp"
		}
	]
}
-- End --

-- File uci/firewall.json --
{
	"zone": [
		{
			".description": "Family any with IPv4 subnet should emit only IPv4 rules",
			"name": "test1",
			"family": "any",
			"subnet": [ "10.0.0.0/8" ],
			"auto_helper": 0
		},

		{
			".description": "Family any with IPv6 subnet should emit only IPv6 rules",
			"name": "test2",
			"family": "any",
			"subnet": [ "2001:db8:1234::1/64" ],
			"auto_helper": 0
		},

		{
			".description": "Family IPv6 with IPv6 subnet should emit only IPv6 rules",
			"name": "test3",
			"family": "ipv6",
			"subnet": [ "2001:db8:1234::1/64" ],
			"auto_helper": 0
		},

		{
			".description": "Family IPv6 with IPv4 subnet should emit no rules",
			"name": "test4",
			"family": "ipv6",
			"subnet": [ "2001:db8:1234::1/64" ],
			"auto_helper": 0
		},

		{
			".description": "Family IPv6 with no subnets should emit only IPv6 rules",
			"name": "test5",
			"family": "ipv6",
			"device": [ "eth0" ],
			"auto_helper": 0
		},

		{
			".description": "Family restrictions of associated ct helpers should not influence zone family selection",
			"name": "test6",
			"family": "any",
			"device": [ "br-lan" ],
			"helper": [ "test" ]
		}
	]
}
-- End --

-- Expect stdout --
table inet fw4
flush table inet fw4

table inet fw4 {
	#
	# CT helper definitions
	#

	ct helper test {
		type "test" protocol tcp;
	}


	#
	# Defines
	#

	define test1_devices = {  }
	define test1_subnets = { 10.0.0.0/8 }

	define test2_devices = {  }
	define test2_subnets = { 2001:db8:1234::/64 }

	define test3_devices = {  }
	define test3_subnets = { 2001:db8:1234::/64 }

	define test4_devices = {  }
	define test4_subnets = { 2001:db8:1234::/64 }

	define test5_devices = { "eth0" }
	define test5_subnets = {  }

	define test6_devices = { "br-lan" }
	define test6_subnets = {  }


	#
	# User includes
	#

	include "/etc/nftables.d/*.nft"


	#
	# Filter rules
	#

	chain input {
		type filter hook input priority filter; policy drop;

		ct state established,related accept comment "!fw4: Accept inbound flows"
		iif "lo" accept comment "!fw4: Accept traffic from loopback"
		meta nfproto ipv4 ip saddr 10.0.0.0/8 jump input_test1 comment "!fw4: Handle test1 IPv4 input traffic"
		meta nfproto ipv6 ip6 saddr 2001:db8:1234::/64 jump input_test2 comment "!fw4: Handle test2 IPv6 input traffic"
		meta nfproto ipv6 ip6 saddr 2001:db8:1234::/64 jump input_test3 comment "!fw4: Handle test3 IPv6 input traffic"
		meta nfproto ipv6 ip6 saddr 2001:db8:1234::/64 jump input_test4 comment "!fw4: Handle test4 IPv6 input traffic"
		meta nfproto ipv6 iifname "eth0" jump input_test5 comment "!fw4: Handle test5 IPv6 input traffic"
		iifname "br-lan" jump input_test6 comment "!fw4: Handle test6 IPv4/IPv6 input traffic"
	}

	chain forward {
		type filter hook forward priority filter; policy drop;

		ct state established,related accept comment "!fw4: Accept forwarded flows"
		meta nfproto ipv4 ip saddr 10.0.0.0/8 jump forward_test1 comment "!fw4: Handle test1 IPv4 forward traffic"
		meta nfproto ipv6 ip6 saddr 2001:db8:1234::/64 jump forward_test2 comment "!fw4: Handle test2 IPv6 forward traffic"
		meta nfproto ipv6 ip6 saddr 2001:db8:1234::/64 jump forward_test3 comment "!fw4: Handle test3 IPv6 forward traffic"
		meta nfproto ipv6 ip6 saddr 2001:db8:1234::/64 jump forward_test4 comment "!fw4: Handle test4 IPv6 forward traffic"
		meta nfproto ipv6 iifname "eth0" jump forward_test5 comment "!fw4: Handle test5 IPv6 forward traffic"
		iifname "br-lan" jump forward_test6 comment "!fw4: Handle test6 IPv4/IPv6 forward traffic"
	}

	chain output {
		type filter hook output priority filter; policy drop;

		ct state established,related accept comment "!fw4: Accept outbound flows"
		oif "lo" accept comment "!fw4: Accept traffic towards loopback"
		meta nfproto ipv4 ip daddr 10.0.0.0/8 jump output_test1 comment "!fw4: Handle test1 IPv4 output traffic"
		meta nfproto ipv6 ip6 daddr 2001:db8:1234::/64 jump output_test2 comment "!fw4: Handle test2 IPv6 output traffic"
		meta nfproto ipv6 ip6 daddr 2001:db8:1234::/64 jump output_test3 comment "!fw4: Handle test3 IPv6 output traffic"
		meta nfproto ipv6 ip6 daddr 2001:db8:1234::/64 jump output_test4 comment "!fw4: Handle test4 IPv6 output traffic"
		meta nfproto ipv6 oifname "eth0" jump output_test5 comment "!fw4: Handle test5 IPv6 output traffic"
		oifname "br-lan" jump output_test6 comment "!fw4: Handle test6 IPv4/IPv6 output traffic"
	}

	chain prerouting {
		type filter hook prerouting priority filter; policy accept;
		iifname "br-lan" jump helper_test6 comment "!fw4: Handle test6 IPv4/IPv6 helper assignment"
	}

	chain handle_reject {
		meta l4proto tcp reject with tcp reset comment "!fw4: Reject TCP traffic"
		reject with icmpx type port-unreachable comment "!fw4: Reject any other traffic"
	}

	chain input_test1 {
		jump drop_from_test1
	}

	chain output_test1 {
		jump drop_to_test1
	}

	chain forward_test1 {
		jump drop_to_test1
	}

	chain drop_from_test1 {
		meta nfproto ipv4 ip saddr 10.0.0.0/8 counter drop comment "!fw4: drop test1 IPv4 traffic"
	}

	chain drop_to_test1 {
		meta nfproto ipv4 ip daddr 10.0.0.0/8 counter drop comment "!fw4: drop test1 IPv4 traffic"
	}

	chain input_test2 {
		jump drop_from_test2
	}

	chain output_test2 {
		jump drop_to_test2
	}

	chain forward_test2 {
		jump drop_to_test2
	}

	chain drop_from_test2 {
		meta nfproto ipv6 ip6 saddr 2001:db8:1234::/64 counter drop comment "!fw4: drop test2 IPv6 traffic"
	}

	chain drop_to_test2 {
		meta nfproto ipv6 ip6 daddr 2001:db8:1234::/64 counter drop comment "!fw4: drop test2 IPv6 traffic"
	}

	chain input_test3 {
		jump drop_from_test3
	}

	chain output_test3 {
		jump drop_to_test3
	}

	chain forward_test3 {
		jump drop_to_test3
	}

	chain drop_from_test3 {
		meta nfproto ipv6 ip6 saddr 2001:db8:1234::/64 counter drop comment "!fw4: drop test3 IPv6 traffic"
	}

	chain drop_to_test3 {
		meta nfproto ipv6 ip6 daddr 2001:db8:1234::/64 counter drop comment "!fw4: drop test3 IPv6 traffic"
	}

	chain input_test4 {
		jump drop_from_test4
	}

	chain output_test4 {
		jump drop_to_test4
	}

	chain forward_test4 {
		jump drop_to_test4
	}

	chain drop_from_test4 {
		meta nfproto ipv6 ip6 saddr 2001:db8:1234::/64 counter drop comment "!fw4: drop test4 IPv6 traffic"
	}

	chain drop_to_test4 {
		meta nfproto ipv6 ip6 daddr 2001:db8:1234::/64 counter drop comment "!fw4: drop test4 IPv6 traffic"
	}

	chain input_test5 {
		jump drop_from_test5
	}

	chain output_test5 {
		jump drop_to_test5
	}

	chain forward_test5 {
		jump drop_to_test5
	}

	chain drop_from_test5 {
		meta nfproto ipv6 iifname "eth0" counter drop comment "!fw4: drop test5 IPv6 traffic"
	}

	chain drop_to_test5 {
		meta nfproto ipv6 oifname "eth0" counter drop comment "!fw4: drop test5 IPv6 traffic"
	}

	chain input_test6 {
		jump drop_from_test6
	}

	chain output_test6 {
		jump drop_to_test6
	}

	chain forward_test6 {
		jump drop_to_test6
	}

	chain helper_test6 {
		meta nfproto ipv4 meta l4proto tcp tcp dport 1234 ct helper set "test" comment "!fw4: An example IPv4-only conntrack helper"
	}

	chain drop_from_test6 {
		iifname "br-lan" counter drop comment "!fw4: drop test6 IPv4/IPv6 traffic"
	}

	chain drop_to_test6 {
		oifname "br-lan" counter drop comment "!fw4: drop test6 IPv4/IPv6 traffic"
	}


	#
	# NAT rules
	#

	chain dstnat {
		type nat hook prerouting priority dstnat; policy accept;
	}

	chain srcnat {
		type nat hook postrouting priority srcnat; policy accept;
	}


	#
	# Raw rules (notrack)
	#

	chain raw_prerouting {
		type filter hook prerouting priority raw; policy accept;
	}

	chain raw_output {
		type filter hook output priority raw; policy accept;
	}


	#
	# Mangle rules
	#

	chain mangle_prerouting {
		type filter hook prerouting priority mangle; policy accept;
	}

	chain mangle_postrouting {
		type filter hook postrouting priority mangle; policy accept;
	}

	chain mangle_input {
		type filter hook input priority mangle; policy accept;
	}

	chain mangle_output {
		type route hook output priority mangle; policy accept;
	}

	chain mangle_forward {
		type filter hook forward priority mangle; policy accept;
	}
}
-- End --
